---
default:
  tags:
    - private-cluster
  interruptible: true

stages:
  - prepare
  - lint
  - build
  - deploy
  # - cleanup

# TODO: Set up cache for Kubernetes runner
cache:
  key: "$CI_COMMIT_REF_NAME"
  paths:
    - .packer/
    - infra/.terraform/
    - infra/.terraform.lock.hcl

variables:
  PKR_ROOT: ${CI_PROJECT_DIR}/templates
  PACKER_PLUGIN_PATH: "${CI_PROJECT_DIR}/.packer/plugins"
  TF_ROOT: ${CI_PROJECT_DIR}/infra
  TF_STATE_NAME: staging

terraform:init:
  stage: prepare
  image: registry.gitlab.com/gitlab-org/terraform-images/releases/terraform:1.2.6
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform init

packer:init:
  stage: prepare
  image: registry.gitlab.com/ralgar/packer-ansible:1.0.0
  script:
    - packer init -upgrade ${PKR_ROOT}

markdownlint:
  stage: lint
  image: registry.gitlab.com/pipeline-components/markdownlint:latest
  script:
    - mdl --style all .

.markdown-spellcheck:
  stage: lint
  image: registry.gitlab.com/pipeline-components/markdown-spellcheck:latest
  script:
    - mdspell --report '**/*.md'

ansible-lint:
  stage: lint
  image: registry.gitlab.com/pipeline-components/ansible-lint:latest
  script:
    - ansible-lint -P production --exclude cluster

packer:validate:
  stage: lint
  image: registry.gitlab.com/ralgar/packer-ansible:1.0.0
  script:
    - packer init ${PKR_ROOT}
    - packer validate -var varsFile=${VARS_FILE} ${PKR_ROOT}

terraform:validate:
  stage: lint
  image: registry.gitlab.com/gitlab-org/terraform-images/releases/terraform:1.2.6
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform validate

plan-infrastructure:
  stage: build
  image: registry.gitlab.com/gitlab-org/terraform-images/releases/terraform:1.2.6
  environment:
    name: staging
  script:
    - cat ${SSH_PUBKEY_FILE} > ${CI_PROJECT_DIR}/ssh_key.pub
    - cd ${TF_ROOT}
    - gitlab-terraform plan -var varsFile=${VARS_FILE}
    - gitlab-terraform plan-json
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/infra/plan.cache
    reports:
      terraform: ${CI_PROJECT_DIR}/infra/plan.json

build-templates:
  stage: build
  image: registry.gitlab.com/ralgar/packer-ansible:1.0.0
  environment:
    name: staging
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - templates/
      when: manual
  script:
    - >
      packer build -var varsFile=${VARS_FILE}
      -only proxmox-clone.k3s-master,proxmox-clone.k3s-controller,proxmox-clone.k3s-worker
      ${PKR_ROOT}

apply-infrastructure:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/terraform-images/releases/terraform:1.2.6
  environment:
    name: staging
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
  script:
    - cat ${SSH_PUBKEY_FILE} > ${CI_PROJECT_DIR}/ssh_key.pub
    - cd ${TF_ROOT}
    - gitlab-terraform apply plan.cache
