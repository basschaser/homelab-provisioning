---
workflow:
  rules:
    # Create only a Merge Request pipeline if an MR is open for the branch,
    #  otherwise create a branch pipeline. Do not duplicate pipelines.
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

default:
  tags:
    - openstack
  interruptible: true

stages:
  - prepare
  - lint
  - build
  - deploy
  - cleanup

cache:
  key: "$CI_COMMIT_REF_NAME"
  paths:
    - infra/envs/**/.terraform/

variables:
  ENVIRONMENT: prod
  TF_ROOT: ${CI_PROJECT_DIR}/infra/envs/${ENVIRONMENT}
  TF_STATE_NAME: ${ENVIRONMENT}

terraform:init:
  stage: prepare
  image: registry.gitlab.com/gitlab-org/terraform-images/releases/terraform:1.2.6
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform init

markdownlint:
  stage: lint
  image: registry.gitlab.com/pipeline-components/markdownlint:latest
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - "**/*.md"
  script:
    - mdl --style all .

terraform:validate:
  stage: lint
  image: registry.gitlab.com/gitlab-org/terraform-images/releases/terraform:1.2.6
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform validate

terraform:plan:
  stage: build
  image: registry.gitlab.com/gitlab-org/terraform-images/releases/terraform:1.2.6
  environment:
    name: ${ENVIRONMENT}
    action: prepare
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform plan -var openstack_clouds_file=${OS_CLOUDS} -var-file=${TF_VARS_FILE}
    - gitlab-terraform plan-json
  artifacts:
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

terraform:apply:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/terraform-images/releases/terraform:1.2.6
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      variables:
        AUTO_STOP_IN: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
      variables:
        AUTO_STOP_IN: 1 day
  environment:
    name: ${ENVIRONMENT}
    action: start
    on_stop: terraform:destroy
    auto_stop_in: ${AUTO_STOP_IN}
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform apply -var openstack_clouds_file=${OS_CLOUDS} -var-file=${TF_VARS_FILE}

terraform:destroy:
  stage: cleanup
  image: registry.gitlab.com/gitlab-org/terraform-images/releases/terraform:1.2.6
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
  environment:
    name: ${ENVIRONMENT}
    action: stop
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform destroy -var openstack_clouds_file=${OS_CLOUDS} -var-file=${TF_VARS_FILE}
