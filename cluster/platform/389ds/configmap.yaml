---
apiVersion: v1
kind: ConfigMap
metadata:
  name: 389ds-init-config
  namespace: 389ds
data:
  init.sh: |
    #!/bin/bash

    set -xeu

    #set -xu
    #trap "sleep 3600" ERR

    export DIRSRV_DOMAIN="dc=homelab,dc=internal"
    export BACKEND_NAME=userRoot
    export JELLYFIN_SERVICE_PASSWORD="$(</secrets/jellyfin-service-password)"

    #
    # Check and see if we have deployed successfully before.
    #

    if [[ -f /data/.bootstrap_success ]] ; then
        # We have successfully bootstrapped, skip ahead.
        exit 0
    else
        # Clear the volume, in case the last bootstrap failed.
        find /data -mindepth 1 -maxdepth 1 ! -name 'tls' -exec rm -rf {} +
    fi

    #
    # Else, initialize the database.
    #

    # Download envsubst
    curl -Lo /data/envsubst \
        https://github.com/a8m/envsubst/releases/download/v1.4.2/envsubst-Linux-x86_64
    chmod +x /data/envsubst

    # Start the directory server in the background
    /usr/bin/dscontainer -r &
    pid=$!

    # Wait for the server to start
    until /usr/bin/dscontainer -H
    do
        sleep 5
    done
    sleep 15

    # Create the backend
    dsconf localhost backend create \
        --suffix "$DIRSRV_DOMAIN" \
        --be-name "$BACKEND_NAME"

    # Template out the LDIF files
    /data/envsubst < /config/base.ldif > /data/ldif/base.ldif

    # Import the base LDIF
    dsconf localhost backend import $BACKEND_NAME base.ldif

    # Disable anonymous bind
    dsconf localhost config replace nsslapd-allow-anonymous-access=off

    #
    # Plugins
    #

    # Enable attribute uniqueness plugin
    for attr in mail uid userid uidNumber gidNumber
    do
        dsconf localhost plugin attr-uniq add \
            "$attr attribute uniqueness" \
            --attr-name "$attr" \
            --subtree "$DIRSRV_DOMAIN"
        dsconf localhost plugin attr-uniq enable \
            "$attr attribute uniqueness"
    done

    # Enable Distributed Numeric Assignment plugin
    dsconf localhost plugin dna config "Account IDs" add \
        --type gidNumber uidNumber \
        --filter "(objectclass=posixAccount)" \
        --scope "$DIRSRV_DOMAIN" \
        --next-value 1001 \
        --magic-regen -1
    dsconf localhost plugin dna enable

    # Enable memberOf plugin
    dsconf localhost plugin memberof enable

    # Enable referential integrity plugin
    dsconf localhost plugin referential-integrity enable

    #
    # Restart the server before we begin seeding data
    #

    kill $pid
    wait $pid
    /usr/bin/dscontainer -r &
    pid=$!

    # Wait for the server to restart
    until /usr/bin/dscontainer -H
    do
        sleep 5
    done
    sleep 15

    #
    # Seed account and group data
    #

    # Create 'administrators' group
    dsidm localhost group create \
        --cn administrators

    # Configure the Jellyfin Service Account
    dsidm localhost service create \
        --cn jellyfin \
        --description "Jellyfin Service Account"
    dsidm localhost account reset_password \
        cn=jellyfin,ou=services,dc=homelab,dc=internal \
        "$JELLYFIN_SERVICE_PASSWORD"

    # Configure the default administrator user
    dsidm localhost user create \
        --cn admin \
        --uid admin \
        --displayName "Admin" \
        --uidNumber 1000 \
        --gidNumber 1000 \
        --homeDirectory /home/admin
    dsidm localhost account reset_password \
        uid=admin,ou=people,dc=homelab,dc=internal \
        "password1234"
    dsidm localhost group add_member \
        administrators \
        uid=admin,ou=people,dc=homelab,dc=internal

    # Clean up
    rm -f /data/envsubst

    # Gracefully terminate the dirsrv
    kill $pid
    wait $pid

    # Indicate successful bootstrap
    touch /data/.bootstrap_success

  base.ldif: |
    version: 1

    # entry-id: 1  |  Domain Root Entry
    dn: $DIRSRV_DOMAIN
    objectClass: top
    objectClass: domain
    dc: homelab
    description: $DIRSRV_DOMAIN
    aci:
      (targetattr="dc || description || objectClass")
      (targetfilter="(objectClass=domain)")
      (version 3.0;
        acl "Enable anyone domain read";
        allow (read, search, compare)
        (userdn="ldap:///anyone");
      )
    aci:
      (targetattr="ou || objectClass")
      (targetfilter="(objectClass=organizationalUnit)")
      (version 3.0;
        acl "Enable anyone ou read";
        allow (read, search, compare)
        (userdn="ldap:///anyone");
      )

    # entry-id: 2  |  Dirsrv System Entry
    # TODO: Figure out what this contains, exactly
    dn: cn=389_ds_system,$DIRSRV_DOMAIN
    objectClass: top
    objectClass: nscontainer
    objectClass: ldapsubentry
    cn: 389_ds_system

    # entry-id: 3  |  Groups OU
    dn: ou=groups,$DIRSRV_DOMAIN
    objectClass: top
    objectClass: organizationalunit
    ou: groups
    aci:
      (targetattr="cn || member || gidNumber || nsUniqueId || description || objectClass")
      (targetfilter="(objectClass=groupOfNames)")
      (version 3.0;
        acl "Enable anyone group read";
        allow (read, search, compare)
        (userdn="ldap:///anyone");
      )
    aci:
      (targetattr="member")
      (targetfilter="(objectClass=groupOfNames)")
      (version 3.0;
        acl "Enable group_modify to alter members";
        allow (write)
        (groupdn="ldap:///cn=group_modify,ou=permissions,$DIRSRV_DOMAIN");
      )
    aci:
      (targetattr="cn || member || gidNumber || description || objectClass")
      (targetfilter="(objectClass=groupOfNames)")
      (version 3.0;
        acl "Enable group_admin to manage groups";
        allow (write, add, delete)
        (groupdn="ldap:///cn=group_admin,ou=permissions,$DIRSRV_DOMAIN");
      )

    # entry-id: 4  |  People OU
    dn: ou=people,$DIRSRV_DOMAIN
    objectClass: top
    objectClass: organizationalunit
    ou: people
    aci:
      (targetattr="objectClass || description || nsUniqueId || uid || displayName || loginShell || uidNumber || gidNumber || gecos || homeDirectory || cn || memberOf || mail || nsSshPublicKey || nsAccountLock || userCertificate")
      (targetfilter="(objectClass=posixaccount)")
      (version 3.0;
        acl "Enable only user self read";
        allow (read, search, compare)
        (userdn="ldap:///self");
      )
    aci:
      (targetattr="displayName || legalName || userPassword || nsSshPublicKey")
      (version 3.0;
        acl "Enable self partial modify";
        allow (write)
        (userdn="ldap:///self");
      )
    aci:
      (targetattr="legalName || telephoneNumber || mobile || sn")
      (targetfilter="(|(objectClass=nsPerson)(objectClass=inetOrgPerson))")
      (version 3.0;
        acl "Enable self legalname read";
        allow (read, search, compare)
        (userdn="ldap:///self");
      )
    aci:
      (targetattr="legalName || telephoneNumber")
      (targetfilter="(objectClass=nsPerson)")
      (version 3.0;
        acl "Enable user legalname read";
        allow (read, search, compare)
        (groupdn="ldap:///cn=user_private_read,ou=permissions,$DIRSRV_DOMAIN");
      )
    aci:
      (targetattr="uid || description || displayName || loginShell || uidNumber || gidNumber || gecos || homeDirectory || cn || memberOf || mail || legalName || telephoneNumber || mobile")
      (targetfilter="(&(objectClass=nsPerson)(objectClass=nsAccount))")
      (version 3.0;
        acl "Enable user admin create";
        allow (write, add, delete, read)
        (groupdn="ldap:///cn=user_admin,ou=permissions,$DIRSRV_DOMAIN");
      )
    aci:
      (targetattr="uid || description || displayName || loginShell || uidNumber || gidNumber || gecos || homeDirectory || cn || memberOf || mail || legalName || telephoneNumber || mobile")
      (targetfilter="(&(objectClass=nsPerson)(objectClass=nsAccount))")
      (version 3.0;
        acl "Enable user modify to change users";
        allow (write, read)
        (groupdn="ldap:///cn=user_modify,ou=permissions,$DIRSRV_DOMAIN");
      )
    aci:
      (targetattr="userPassword || nsAccountLock || userCertificate || nsSshPublicKey")
      (targetfilter="(objectClass=nsAccount)")
      (version 3.0;
        acl "Enable user password reset";
        allow (write, read)
        (groupdn="ldap:///cn=user_passwd_reset,ou=permissions,$DIRSRV_DOMAIN");
      )
    aci:
      (targetattr="objectClass || description || nsUniqueId || uid || displayName || loginShell || uidNumber || gidNumber || gecos || homeDirectory || cn || memberOf || mail || nsSshPublicKey || nsAccountLock || userCertificate || employeeType")
      (targetfilter="(objectClass=nsAccount)")
      (version 3.0;
        acl "Enable only user read";
        allow (read, search, compare)
        (groupdn="ldap:///cn=user_read,ou=permissions,$DIRSRV_DOMAIN");
      )

    # entry-id: 5  |  Permissions OU
    dn: ou=permissions,$DIRSRV_DOMAIN
    objectClass: top
    objectClass: organizationalunit
    ou: permissions

    # entry-id: 6  |  Services OU
    dn: ou=services,$DIRSRV_DOMAIN
    objectClass: top
    objectClass: organizationalunit
    ou: services
    aci: (
      targetattr="objectClass || description || nsUniqueId || cn || memberOf || nsAccountLock")
      (targetfilter="(objectClass=netscapeServer)")
      (version 3.0;
        acl "Enable anyone service account read";
        allow (read, search, compare)
        (userdn="ldap:///anyone");
      )

    # entry-id: 7  |  Permission - Group Admin
    dn: cn=group_admin,ou=permissions,$DIRSRV_DOMAIN
    objectClass: top
    objectClass: groupOfNames
    objectClass: nsMemberOf
    cn: group_admin

    # entry-id: 8  |  Permission - Group Modify
    dn: cn=group_modify,ou=permissions,$DIRSRV_DOMAIN
    objectClass: top
    objectClass: groupOfNames
    objectClass: nsMemberOf
    cn: group_modify

    # entry-id: 9  |  Permission - User Admin
    dn: cn=user_admin,ou=permissions,$DIRSRV_DOMAIN
    objectClass: top
    objectClass: groupOfNames
    objectClass: nsMemberOf
    cn: user_admin

    # entry-id: 10  |  Permission - User Modify
    dn: cn=user_modify,ou=permissions,$DIRSRV_DOMAIN
    objectClass: top
    objectClass: groupOfNames
    objectClass: nsMemberOf
    cn: user_modify

    # entry-id: 11  |  Permission - User Password Reset
    dn: cn=user_passwd_reset,ou=permissions,$DIRSRV_DOMAIN
    objectClass: top
    objectClass: groupOfNames
    objectClass: nsMemberOf
    cn: user_passwd_reset

    # entry-id: 12  |  Permission - User Private Read
    dn: cn=user_private_read,ou=permissions,$DIRSRV_DOMAIN
    objectClass: top
    objectClass: groupOfNames
    objectClass: nsMemberOf
    cn: user_private_read

    # entry-id: 13  |  Permission - User Read
    dn: cn=user_read,ou=permissions,$DIRSRV_DOMAIN
    objectClass: top
    objectClass: groupOfNames
    objectClass: nsMemberOf
    cn: user_read
    member: cn=jellyfin,ou=services,dc=homelab,dc=internal
